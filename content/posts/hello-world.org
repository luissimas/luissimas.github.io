#+title: Hello World
#+date: [2023-11-11 Tue]
#+lastmod: [2023-11-14 Tue]
#+tags[]: Emacs Hugo Test Go Elixir Python

* Título
Sei lá

** Eita bixo
Será que vai *renderizar* corretamente o org-mode?

#+begin_src elixir
IO.inspect "hello!"
#+end_src

#+begin_src python
def seila(sklj):
    with open("alksdjf") as f:
        f.close()
#+end_src

And here's a larger Go source block:

#+begin_src go
package main

import (
	"log"
	"net"
)

type IRCServer struct {
	newConnCh <-chan net.Conn
	serverCh  chan Message
	clients   []*Client
	channels  map[string][]*Client
	tcpServer *TCPServer
}

func NewIRCServer(host string, port int) IRCServer {
	newConnCh := make(chan net.Conn)
	serverCh := make(chan Message)
	clients := make([]*Client, 0)
	channels := make(map[string][]*Client)

	tcpServer := NewTCPServer(host, port, newConnCh)

	return IRCServer{
		newConnCh: newConnCh,
		serverCh:  serverCh,
		clients:   clients,
		tcpServer: &tcpServer,
		channels:  channels,
	}
}

// Start starts the IRC server.
func (s *IRCServer) Start() {
	// New connection handler
	go func() {
		for newConn := range s.newConnCh {
			log.Printf("IRC Server got a new connection")
			client := NewClient(newConn, s.serverCh)
			s.clients = append(s.clients, &client)
			go client.Start()
		}
	}()

	// Main command handler
	go func() {
		for msg := range s.serverCh {
			for _, client := range s.clients {
				if client != msg.From {
					client.Send(msg)
				}
			}
		}
	}()

	s.tcpServer.Start()
}
#+end_src
